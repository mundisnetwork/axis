#!/usr/bin/env bash
#
# Copyright 2016 The Rust Project Developers. See the COPYRIGHT
# file at the top-level directory of this distribution and at
# http://rust-lang.org/COPYRIGHT.
#
# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license
# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your
# option. This file may not be copied, modified, or distributed
# except according to those terms.

# This is just a little script that can be downloaded from the internet to
# install MUNDIS binaries. It just does platform detection and downloads the binaries

MUNDIS_RELEASE=v0.9.27
MUNDIS_DOWNLOAD_ROOT=https://release.mundis.io

set -e

main() {
    downloader --check
    need_cmd uname
    need_cmd mktemp
    need_cmd chmod
    need_cmd mkdir
    need_cmd rm
    need_cmd sed
    need_cmd grep

    for arg in "$@"; do
      case "$arg" in
        -h|--help)
          usage
          exit 0
          ;;
        *)
          ;;
      esac
    done

    _ostype="$(uname -s)"
    _cputype="$(uname -m)"

    case "$_ostype" in
    Linux)
      _ostype=unknown-linux-gnu
      ;;
    *)
      err "machine architecture is currently unsupported"
      ;;
    esac

    echo -n "Checking 'mundis' user: "
    if id "mundis" &>/dev/null; then
	echo "no action needed."
    else
        adduser mundis --gecos "" --disabled-password --quiet
	echo "added."
    fi

    echo -n "Tuning kernel params: "
    if [ -f "/etc/sysctl.d/99-mundis.conf" ]; then
	echo "not needed"
    else
	cat <<EOF > /etc/sysctl.d/99-mundis.conf
net.core.rmem_max=134217728
net.core.optmem_max=0
net.core.rmem_default=134217728
net.core.wmem_default=134217728
net.core.netdev_max_backlog=0
vm.max_map_count=1000000
net.core.wmem_max=134217728
EOF
	sysctl --system > /dev/null
	echo "done."
    fi

    echo "Downloading Mundis $MUNDIS_RELEASE binaries"
    binaries=('mundis' 'mundis-faucet' 'mundis-genesis' 'mundis-gossip' 'mundis-keygen' 'mundis-ledger-tool' 'mundis-validator')

    for binary in "${binaries[@]}"
    do
        echo -n "Fetching '/usr/local/bin/$binary'..."
	rm -f "/usr/local/bin/$binary"
        ensure downloader "$MUNDIS_DOWNLOAD_ROOT/$MUNDIS_RELEASE/$binary" "/usr/local/bin/$binary"
        ensure chmod a+x "/usr/local/bin/$binary"
        echo "done."
    done

    echo -n "Creating validator scripts: "
    mkdir -p /home/mundis/bin
    mkdir -p /home/mundis/logs
    cat << EOF > /home/mundis/bin/validator.sh
#!/usr/bin/env bash
set -ex
shopt -s nullglob

export RUST_BACKTRACE=1
export RUST_LOG=info

# Delete any zero-length snapshots that can cause validator startup to fail
find /mnt/ledger -name 'snapshot-*' -size 0 -print -exec rm {} \; || true

args=(
  --dynamic-port-range 8002-8015
  --gossip-port 8001
  --identity "\$IDENTITY_KEYPAIR"
  --ledger "\$LEDGER_DIR"
  --accounts "\$ACCOUNTS_DIR"
  --limit-ledger-size
  --rpc-port 8899
  --expected-genesis-hash "\$GENESIS_HASH"
  --wal-recovery-mode skip_any_corrupted_record
  --vote-account "\$VOTE_ACCOUNT_KEYPAIR"
  --authorized-voter "\$IDENTITY_KEYPAIR"
  --expected-shred-version "\$SHRED_VERSION"
  --entrypoint entrypoint1.devnet.mundis.io:8001
  --entrypoint entrypoint2.devnet.mundis.io:8001
  --no-genesis-fetch
  --no-snapshot-fetch
  --log "\$VALIDATOR_LOG_FILE"
  --no-wait-for-vote-to-start-leader
  --snapshot-interval-slots 200
)

exec mundis-validator "${args[@]}"
EOF
    chmod 755 /home/mundis/bin/validator.sh
    echo "done."

    echo -n "Creating system services: "
    mkdir -p /mnt/accounts
    mkdir -p /mnt/ledger

    cat <<EOF > /etc/systemd/system/validator.service
[Unit]
Description=Mundis Validator
After=network.target
StartLimitIntervalSec=0

[Service]
Type=simple
Restart=always
RestartSec=1
User=mundis
LimitNOFILE=500000
LogRateLimitIntervalSec=0
ExecStart=/home/mundis/bin/validator.sh
EnvironmentFile=-/etc/default/validator

[Install]
WantedBy=multi-user.target
EOF

   cat <<EOF > /etc/default/validator
SHRED_VERSION=1583
GENESIS_HASH=3GYa2Q2H2qEDU9gQLjNQpH6q381Dk2u3TR2DcLhBgdoW
LEDGER_DIR=/mnt/ledger
ACCOUNTS_DIR=/mnt/accounts
IDENTITY_KEYPAIR=/home/mundis/validator-identity.json
VOTE_ACCOUNT_KEYPAIR=/home/mundis/validator-vote-account.json
MUNDIS_METRICS_CONFIG=host=http://metrics.devnet.mundis.io:8086,db=devnet,u=admin,p=Metaverse2022
VALIDATOR_LOG_FILE=/home/mundis/logs/validator.log
EOF
   systemctl daemon-reload
   systemctl enable validator
   echo "done."

   echo ""
   echo "Please update the following configuration params in the /etc/default/validator file:"
   echo "------------------------------------------------------------------------------------"
   cat /etc/default/validator
}

err() {
    printf 'Mundis installer: %s\n' "$1" >&2
    exit 1
}

need_cmd() {
    if ! check_cmd "$1"; then
        err "need '$1' (command not found)"
    fi
}

check_cmd() {
    command -v "$1" > /dev/null 2>&1
}

# Run a command that should never fail. If the command fails execution
# will immediately terminate with an error showing the failing
# command.
ensure() {
    if ! "$@"; then
      err "command failed: $*"
    fi
}

# This is just for indicating that commands' results are being
# intentionally ignored. Usually, because it's being executed
# as part of error handling.
ignore() {
    "$@"
}

# This wraps curl or wget. Try curl first, if not installed,
# use wget instead.
downloader() {
    if check_cmd curl; then
        program=curl
    elif check_cmd wget; then
        program=wget
    else
        program='curl or wget' # to be used in error message of need_cmd
    fi

    if [ "$1" = --check ]; then
        need_cmd "$program"
    elif [ "$program" = curl ]; then
        curl -sSfL "$1" -o "$2"
    elif [ "$program" = wget ]; then
        wget "$1" -O "$2"
    else
        err "Unknown downloader"   # should not reach here
    fi
}

main "$@"
